const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');

// Initialize bot with your Telegram Bot Token
const BOT_TOKEN = process.env.BOT_TOKEN || 'YOUR_BOT_TOKEN';
const API_BASE_URL = 'https://subtitlesapibzeroo.venurasandeepa22.workers.dev';

const bot = new Telegraf(BOT_TOKEN);

// Store user sessions
const userSessions = new Map();

// Store user first visit and last image index
const userVisits = new Map();

// Helper function to get greeting based on server time + timezone offset
function getGreeting() {
  // Get current UTC time
  const now = new Date();
  
  // Add your timezone offset (for Sri Lanka/India: UTC+5:30)
  // Adjust this offset based on your timezone
  const timezoneOffset = 5.5; // 5 hours 30 minutes
  const localTime = new Date(now.getTime() + (timezoneOffset * 60 * 60 * 1000));
  const hour = localTime.getUTCHours();
  
  if (hour >= 5 && hour < 12) return '…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üåû';
  if (hour >= 12 && hour < 17) return '…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ ‚òÄÔ∏è';
  if (hour >= 17 && hour < 21) return '…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üåÜ';
  return '…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üåô';
}

// Helper function to make API requests
async function searchSubtitles(query) {
  try {
    const response = await axios.get(`${API_BASE_URL}/api/search/${encodeURIComponent(query)}`);
    return response.data;
  } catch (error) {
    console.error('Search API error:', error);
    return null;
  }
}

async function getSubtitlesByTMDB(tmdbId) {
  try {
    const response = await axios.get(`${API_BASE_URL}/api/subtitles/tmdb/${tmdbId}`);
    return response.data;
  } catch (error) {
    console.error('TMDB API error:', error);
    return null;
  }
}

async function downloadSubtitle(downloadUrl) {
  try {
    const response = await axios.get(`${API_BASE_URL}${downloadUrl}`, {
      responseType: 'arraybuffer',
      timeout: 30000 // 30 seconds timeout
    });
    return response.data;
  } catch (error) {
    console.error('Download error:', error);
    return null;
  }
}

// Start command with images
bot.start(async (ctx) => {
  const userName = ctx.from.first_name || 'there';
  const greeting = getGreeting();
  const userId = ctx.from.id;
  
  const welcomeMessage = ` ú·¥á è, ${userName}**! ${greeting}**
…™'·¥ç  è·¥è·¥ú Ä ·¥ò·¥è·¥°·¥á Ä“ì·¥ú ü s·¥ú ô·¥õ…™·¥õ ü·¥á ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á Ä  ô·¥è·¥õ üéûÔ∏è
·¥ä·¥ús·¥õ s·¥á…¥·¥Ö ·¥ç·¥á ·¥Ä ·¥ç·¥è·¥†…™·¥á ·¥è Ä s·¥á Ä…™·¥ás …¥·¥Ä·¥ç·¥á, ·¥Ä…¥·¥Ö …™' ü ü “ì…™…¥·¥Ö  è·¥è·¥ú Ä s·¥ú ô·¥õ…™·¥õ ü·¥ás …™…¥s·¥õ·¥Ä…¥·¥õ ü è ‚è¨
s·¥ú·¥ò·¥ò·¥è Ä·¥õs ·¥ç·¥ú ü·¥õ…™- ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á ·¥Ä…¥·¥Ö ·¥ò·¥á Ä·¥ç·¥Ä…¥·¥á…¥·¥õ s·¥ú ô·¥õ…™·¥õ ü·¥á ·¥ç·¥á Ä…¢…™…¥…¢ üé¨
 ü·¥á·¥õ's ·¥ç·¥Ä·¥ã·¥á  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á …¥…™…¢ ú·¥õs ·¥á·¥†·¥á…¥  ô·¥á·¥õ·¥õ·¥á Ä! üçø

 ô·¥è·¥õ ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á·¥Ö  ô è @Zeroboy216`;

  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.url('üì¢ ·¥ä·¥è…™…¥ …¢ Ä·¥è·¥ú·¥ò', 'https://t.me/zerodevbro')
    ],
    [
      Markup.button.url('üé¨ ·¥ç·¥è·¥†…™·¥á ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á Ä', 'https://t.me/Filmzimovietvserise21bot')
    ]
  ]);

  // Available images
  const images = [
    'https://ar-hosting.pages.dev/1761107260503.jpg',
    'https://ar-hosting.pages.dev/1761107265807.jpg',
    'https://ar-hosting.pages.dev/1761107283565.jpg'
  ];

  try {
    // Check if user has visited before
    const userVisit = userVisits.get(userId);
    
    if (!userVisit) {
      // First time user - send first image
      userVisits.set(userId, { 
        visited: true, 
        lastImageIndex: 0,
        visitCount: 1
      });
      
      await ctx.replyWithPhoto(images[0], {
        caption: welcomeMessage,
        ...keyboard
      });
    } else {
      // Returning user - send random image (excluding last shown)
      let randomIndex;
      do {
        randomIndex = Math.floor(Math.random() * images.length);
      } while (randomIndex === userVisit.lastImageIndex && images.length > 1);
      
      // Update user visit info
      userVisits.set(userId, {
        visited: true,
        lastImageIndex: randomIndex,
        visitCount: userVisit.visitCount + 1
      });
      
      await ctx.replyWithPhoto(images[randomIndex], {
        caption: welcomeMessage,
        ...keyboard
      });
    }
  } catch (error) {
    // Fallback if images fail
    console.error('Image send error:', error);
    ctx.reply(welcomeMessage, keyboard);
  }
});

// Help command
bot.help((ctx) => {
  ctx.reply(`ü§ñ * ô·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös:*

/search <movie name> - s·¥á·¥Ä Ä·¥Ñ ú s·¥ú ô·¥õ…™·¥õ ü·¥ás
/tmdb <tmdb id> - s·¥á·¥Ä Ä·¥Ñ ú  ô è ·¥õ·¥ç·¥Ö ô …™·¥Ö
/help - s ú·¥è·¥°  ú·¥á ü·¥ò

*·¥áx·¥Ä·¥ç·¥ò ü·¥ás:*
‚Ä¢ /search Inception
‚Ä¢ /search The Dark Knight
‚Ä¢ /tmdb 550
‚Ä¢ /tmdb 680

 ô·¥è·¥õ ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á·¥Ö  ô è @Zeroboy216`, { parse_mode: 'Markdown' });
});

// Search command
bot.command('search', async (ctx) => {
  const query = ctx.message.text.split(' ').slice(1).join(' ');
  
  if (!query) {
    return ctx.reply('‚ùå ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥ç·¥è·¥†…™·¥á …¥·¥Ä·¥ç·¥á. ·¥áx·¥Ä·¥ç·¥ò ü·¥á: /search Fight Club');
  }

  await handleSearch(ctx, query);
});

// TMDB command
bot.command('tmdb', async (ctx) => {
  const tmdbId = ctx.message.text.split(' ')[1];
  
  if (!tmdbId) {
    return ctx.reply('‚ùå ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥õ·¥ç·¥Ö ô …™·¥Ö. ·¥áx·¥Ä·¥ç·¥ò ü·¥á: /tmdb 550');
  }

  if (!/^\d+$/.test(tmdbId)) {
    return ctx.reply('‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥õ·¥ç·¥Ö ô …™·¥Ö. ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä …¥·¥ú·¥ç·¥á Ä…™·¥Ñ …™·¥Ö.');
  }

  try {
    const startTime = Date.now();
    ctx.reply('üîç s·¥á·¥Ä Ä·¥Ñ ú…™…¥…¢ “ì·¥è Ä s·¥ú ô·¥õ…™·¥õ ü·¥ás  ô è ·¥õ·¥ç·¥Ö ô …™·¥Ö...');
    
    const data = await getSubtitlesByTMDB(tmdbId);
    const searchTime = ((Date.now() - startTime) / 1000).toFixed(2);
    
    if (!data || !data.success) {
      return ctx.reply('‚ùå …¥·¥è s·¥ú ô·¥õ…™·¥õ ü·¥ás “ì·¥è·¥ú…¥·¥Ö “ì·¥è Ä ·¥õ ú…™s ·¥õ·¥ç·¥Ö ô …™·¥Ö.');
    }

    // Store movie data in session
    userSessions.set(ctx.from.id, {
      movie: data.movie,
      subtitles: data.subtitles
    });

    await sendMovieResults(ctx, data, searchTime, tmdbId);
    
  } catch (error) {
    console.error('TMDB search error:', error);
    ctx.reply('‚ùå ·¥á Ä Ä·¥è Ä s·¥á·¥Ä Ä·¥Ñ ú…™…¥…¢ “ì·¥è Ä s·¥ú ô·¥õ…™·¥õ ü·¥ás. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.');
  }
});

// Handle search with autofilter style
async function handleSearch(ctx, query) {
  try {
    const startTime = Date.now();
    ctx.reply('üîç s·¥á·¥Ä Ä·¥Ñ ú…™…¥…¢ “ì·¥è Ä s·¥ú ô·¥õ…™·¥õ ü·¥ás...');
    
    const data = await searchSubtitles(query);
    const searchTime = ((Date.now() - startTime) / 1000).toFixed(2);
    
    if (!data || !data.success) {
      return ctx.reply('‚ùå …¥·¥è s·¥ú ô·¥õ…™·¥õ ü·¥ás “ì·¥è·¥ú…¥·¥Ö. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¥·¥è·¥õ ú·¥á Ä ·¥ç·¥è·¥†…™·¥á …¥·¥Ä·¥ç·¥á.');
    }

    // Store movie data in session
    userSessions.set(ctx.from.id, {
      movie: data.movie,
      subtitles: data.subtitles
    });

    await sendMovieResults(ctx, data, searchTime, query);
    
  } catch (error) {
    console.error('Quick search error:', error);
    ctx.reply('‚ùå ·¥á Ä Ä·¥è Ä s·¥á·¥Ä Ä·¥Ñ ú…™…¥…¢ “ì·¥è Ä s·¥ú ô·¥õ…™·¥õ ü·¥ás. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.');
  }
}

// Function to send movie results with autofilter style
async function sendMovieResults(ctx, data, searchTime, query) {
  const { movie, subtitles } = data;
  const userName = ctx.from.first_name || 'User';
  
  // Autofilter style header
  const headerMessage = `T ú·¥á R·¥áÍú±·¥ú ü·¥õÍú± F·¥è Ä ‚òû ${query}

R·¥á«´·¥ú·¥áÍú±·¥õ·¥á·¥Ö B è ‚òû ${userName}

 Ä·¥ás·¥ú ü·¥õ s ú·¥è·¥° …™…¥ ‚òû ${searchTime} s·¥á·¥Ñ·¥è…¥·¥Ös

·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ‚òû @Subtitles_Z_bot

üçø Y·¥è·¥ú Ä Subtitles F…™ ü·¥áÍú± üëá`;

  await ctx.reply(headerMessage);

  // Group subtitles by language
  const subtitlesByLang = {};
  subtitles.forEach(sub => {
    if (!subtitlesByLang[sub.language]) {
      subtitlesByLang[sub.language] = [];
    }
    subtitlesByLang[sub.language].push(sub);
  });

  // Send subtitles with inline buttons (autofilter style)
  for (const [language, langSubtitles] of Object.entries(subtitlesByLang)) {
    const buttons = [];
    
    // Create buttons in rows of 2
    for (let i = 0; i < Math.min(langSubtitles.length, 20); i++) {
      const sub = langSubtitles[i];
      const buttonText = `üì• ${sub.name.substring(0, 35)}...`;
      const callbackData = `dl_${i}_${language}_${Date.now()}`.substring(0, 64);
      
      // Store subtitle info in session for callback
      const session = userSessions.get(ctx.from.id) || {};
      if (!session.downloadMap) session.downloadMap = {};
      session.downloadMap[callbackData] = sub;
      userSessions.set(ctx.from.id, session);
      
      buttons.push(Markup.button.callback(buttonText, callbackData));
    }
    
    // Arrange buttons in rows of 1 (full width like autofilter)
    const keyboard = [];
    buttons.forEach(button => {
      keyboard.push([button]);
    });
    
    const langHeader = `üó£Ô∏è *${language} S·¥ú ô·¥õ…™·¥õ ü·¥ás* (${langSubtitles.length} ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á)`;
    
    try {
      await ctx.reply(langHeader, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard(keyboard)
      });
    } catch (error) {
      console.error('Error sending subtitles:', error);
    }
  }
}

// Handle callback queries for subtitle downloads
bot.on('callback_query', async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  
  if (callbackData.startsWith('dl_')) {
    const session = userSessions.get(ctx.from.id);
    
    if (!session || !session.downloadMap || !session.downloadMap[callbackData]) {
      return ctx.answerCbQuery('‚ùå s·¥ú ô·¥õ…™·¥õ ü·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö. ·¥ò ü·¥á·¥Äs·¥á s·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.');
    }
    
    const subtitle = session.downloadMap[callbackData];
    
    try {
      await ctx.answerCbQuery('‚è≥ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ s·¥ú ô·¥õ…™·¥õ ü·¥á... ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ 20 s·¥á·¥Ñ·¥è…¥·¥Ös');
      
      const downloadMsg = await ctx.reply('üì• ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢  è·¥è·¥ú Ä s·¥ú ô·¥õ…™·¥õ ü·¥á...\n‚è±Ô∏è ·¥õ ú…™s ·¥ç·¥Ä è ·¥õ·¥Ä·¥ã·¥á ·¥ú·¥ò ·¥õ·¥è 20 s·¥á·¥Ñ·¥è…¥·¥Ös\n\n*·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...*', { parse_mode: 'Markdown' });
      
      const fileData = await downloadSubtitle(subtitle.proxy_download_url);
      
      if (!fileData) {
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          downloadMsg.message_id,
          null,
          '‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö s·¥ú ô·¥õ…™·¥õ ü·¥á. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.'
        );
        return;
      }
      
      // Delete downloading message
      await ctx.telegram.deleteMessage(ctx.chat.id, downloadMsg.message_id);
      
      // Send subtitle file directly to user
      await ctx.replyWithDocument(
        { source: Buffer.from(fileData), filename: subtitle.name },
        {
          caption: `‚úÖ *s·¥ú ô·¥õ…™·¥õ ü·¥á ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!*\n\nüìÅ ${subtitle.name}\n‚≠ê  Ä·¥Ä·¥õ…™…¥…¢: ${subtitle.rating}\nüì• ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ös: ${subtitle.downloads}\n\n·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è @Subtitles_Z_bot`,
          parse_mode: 'Markdown'
        }
      );
      
    } catch (error) {
      console.error('Download error:', error);
      ctx.reply('‚ùå ·¥á Ä Ä·¥è Ä ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ s·¥ú ô·¥õ…™·¥õ ü·¥á. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä.');
    }
  }
});

// Handle text messages for quick search (autofilter style)
bot.on('text', async (ctx) => {
  const text = ctx.message.text;
  
  // Ignore commands
  if (text.startsWith('/')) return;
  
  // If message is longer than 2 characters, treat as search
  if (text.length > 2) {
    await handleSearch(ctx, text);
  }
});

// Error handling
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
  ctx.reply('‚ùå ·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.');
});

// Webhook for Vercel
module.exports = async (req, res) => {
  try {
    await bot.handleUpdate(req.body, res);
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(400).send('Error processing webhook');
  }
};

// For local development
if (process.env.NODE_ENV === 'development') {
  bot.launch().then(() => {
    console.log('Bot is running in development mode');
  });
}

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
